/*******************************************************************************
errorlog:XM430-RとほかのTTLタイプが同時には動かない。TTLタイプに統一?
*******************************************************************************/

#include <DynamixelWorkbench.h>
#include "setup_para.h"
#include "dynamixelHsrlLib.h"
#include "robotControl.h"
#include "ROSSetup.h"


#define __SERIAL_WAIT_ON               //実動作試験ではコメントアウト
#define __Dynamixel_ON                 //DynamixelをOFFしたい場合コメントアウト　
#define __TimerLoop_ON                 //TimerloopをOFFしたい場合コメントアウト
//#define __Debug_ON                   //SerialモニタをOFFしたい場合コメントアウト 
//#define __Torque_OFF

DynamixelWorkbench dxl_wb;
HardwareTimer Timer(TIMER_CH1); //Periodic timerloop
DYNAMIXEL_JOINT DJ[Jnum+1];

extern int srv_flag;
extern int req_trajectry_size;
extern int req_trajectry_points_size;

extern void RosInit();
extern void joint_states_pub();
extern uint8_t setTrajePoints_S1();   //paintingTrajectoryをセットする関数
extern uint8_t setTrajePoints_S2();   //paintingTrajectoryをセットする関数
extern uint8_t setTrajePoints_S3();   //paintingTrajectoryをセットする関数
extern uint8_t setTrajePoints_S4();   //paintingTrajectoryをセットする関数
extern uint8_t setTrajePoints_S5();

Robot rb;                       //Robot 構造体
unsigned long time_passed;
unsigned long time_old;
uint32_t cTime;                //timerloopの内部処理時間
uint32_t cTime_old;
uint8_t servoOutputFlag = 0;

typedef enum { st_OfflineSinTrajectory=2,
               st_Error=99,
               st_Debug=100               
}status_t;

uint8_t modeNum = 100; //st_OfflineSinTrajectory;
uint8_t pTask_flag = 0;                  //1平面

//=========== sync_write用変数===========2022/03/01追加
uint8_t dxl_id[Jnum] = {0,};
int32_t goal_position[Jnum] = {0,};
const uint8_t handler_index = 0;
//=====================================
void calPulse2AngleSync_Read();

//-------------------SET UP------------------
void setup() 
{
  const char *log;
  bool result = false;

#ifdef __Debug_ON
  Serial.begin(115200);
  //Serial2.begin(115200); 
  #ifdef __SERIAL_WAIT_ON
   while(!Serial); // Wait for Opening Serial Monitor
  #endif 
  delay(1000);
#endif 
  
//  RC100_setup();         //Joystick setup 
//  delay(1000);

 //---パラメータ初期化
  SetupParameter();
 
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++) dxl_id[i-1]=DJ[i].id;   //sync用ID配列
 
  //***************************************ros
  RosInit();
 #ifdef __Dynamixel_ON  
 //---Dynamixelの認識
  RecognitionJoint(DJ[J1].jnum); 
  RecognitionJoint(DJ[J2].jnum); 
  RecognitionJoint(DJ[J3].jnum); 
  RecognitionJoint(DJ[J4].jnum); 
  RecognitionJoint(DJ[J5].jnum); 
  RecognitionJoint(DJ[J6].jnum); 
  RecognitionDynamixel(ID_J20);               //J2のdual駆動で、直接Dynamixel IDを設定 
 
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){
    dxl_wb.torqueOff(DJ[i].id);
    dxl_wb.setTimeBasedProfile(DJ[i].id);
    dxl_wb.itemWrite(DJ[i].id, "Profile_Velocity",2000);  //リフトの速度制限を200*0.229 rpmに設定
    dxl_wb.itemWrite(DJ[i].id, "Profile_Acceleration",100);  
    dxl_wb.torqueOn(DJ[i].id);
  }

//---Dynamixelの初期化及びモード設定
 EPCM_Set_Init( DJ[J3].jnum, DJ[J3].ang.offset, DJ[J3].ang.init, 2000, DJ[J3].revmode);  //dyn125degを関節30degに。 162
 EPCM_Set_Init( DJ[J1].jnum, DJ[J1].ang.offset, DJ[J1].ang.init, 2000, DJ[J1].revmode);  //dyn315degを関節0degに。
 EPCM_Set_Init( DJ[J4].jnum, DJ[J4].ang.offset, DJ[J4].ang.init, 2000, DJ[J4].revmode);  //dyn180degを関節0degに。
 EPCM_Set_Init( DJ[J5].jnum, DJ[J5].ang.offset, DJ[J5].ang.init, 2000, DJ[J5].revmode);  //dyn180degを関節0degに。180
 EPCM_Set_Init( DJ[J6].jnum, DJ[J6].ang.offset, DJ[J6].ang.init, 2000, DJ[J6].revmode);  //dyn180degを関節0degに。
 EPCM_Set_Init( DJ[J2].jnum, DJ[J2].ang.offset, DJ[J2].ang.init, 2000, DJ[J2].revmode);  //dyn105degを関節150degに。245



//////////////////////////////////////////////////////////////////////
 //=======パラメータセットアップ後にsync用配列にidを入力   2022/03/01追加

 ///// sync用のhandlerに各パラメータを登録
  result = dxl_wb.addSyncWriteHandler(dxl_id[0], "Goal_Position", &log);
  if (result == false){ Serial.println(log);  Serial.println("Failed to add sync write handler"); }
  Serial.println(handler_index);
  
  result = dxl_wb.addSyncReadHandler(dxl_id[0], "Present_Position", &log);
  if (result == false){ Serial.println(log);  Serial.println("Failed to add sync read handler");  }
   Serial.println(handler_index);
 //////////////////////////////////////////////////////////////////////


  //--現在角度の表示
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){
    calPulse2Angle(DJ[i].jnum);     //DXLパルスから現在角度取得 
  }
 
#ifdef __Debug_ON  
  Serial.println("----------------------------------------------------------------");
  Serial.print("Dxl Pulse: ");
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ Serial.print(DJ[i].pulse.n);    Serial.print('\t');   }
  Serial.println();  
  Serial.print("Dxl angle: ");
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ Serial.print(DJ[i].dxlAng.n);    Serial.print('\t');   }
  Serial.println();  
  Serial.print("Jnt angle: ");
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ Serial.print(DJ[i].ang.n);    Serial.print('\t');   }
  Serial.println();    
  Serial.println("----------------------------------------------------------------");
  Serial.println("Mechanical Origin Position Setup Finished ");
  delay(1000);
  Serial.println("Go to Control Orign Position ");
  delay(1000);
#endif

  //作業初期ポーズへ  (任意)
 // DJ[J1].ang.g=0;  DJ[J2].ang.g=90;   DJ[J3].ang.g=0;
 // DJ[J4].ang.g=0; DJ[J5].ang.g=-90;   DJ[J6].ang.g=0;   
  DJ[J1].ang.g=0;  DJ[J2].ang.g=140;   DJ[J3].ang.g=-40;
  DJ[J4].ang.g=0; DJ[J5].ang.g=-90;   DJ[J6].ang.g=0;
  
 // goInitJointConfig(DJ[J1].jnum,DJ[J1].ang.g,1);  //関節を目標角度まで駆動  
 // goInitJointConfig(DJ[J3].jnum,DJ[J3].ang.g,1);  //関節を目標角度まで駆動  
 // goInitJointConfig(DJ[J2].jnum,DJ[J2].ang.g,1);  //関節を目標角度まで駆動
 // goInitJointConfig(DJ[J4].jnum,DJ[J4].ang.g,1);  //関節を目標角度まで駆動
 // goInitJointConfig(DJ[J5].jnum,DJ[J5].ang.g,1);  //関節を目標角度まで駆動
 // goInitJointConfig(DJ[J6].jnum,DJ[J6].ang.g,1);  //関節を目標角度まで駆動


  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){
    dxl_wb.itemWrite(DJ[i].id, "Profile_Velocity",1000);  //リフトの速度制限を200*0.229 rpmに設定
    dxl_wb.itemWrite(DJ[i].id, "Profile_Acceleration",100);  
    dxl_wb.itemWrite(DJ[i].id, "Position_P_Gain",1000); 
    dxl_wb.itemWrite(DJ[i].id, "Position_I_Gain",10); 
  }

   goInitJointConfig(DJ[J3].jnum,DJ[J3].ang.g,1);  //関節を目標角度まで駆動 
   goInitJointConfig(DJ[J5].jnum,DJ[J5].ang.g,1);  //関節を目標角度まで駆動
   goInitJointConfig(DJ[J2].jnum,DJ[J2].ang.g,1);  //関節を目標角度まで駆動
   goInitJointConfig(DJ[J4].jnum,DJ[J4].ang.g,1);  //関節を目標角度まで駆動
   goInitJointConfig(DJ[J6].jnum,DJ[J6].ang.g,1);  //関節を目標角度まで駆動
   goInitJointConfig(DJ[J1].jnum,DJ[J1].ang.g,1);  //関節を目標角度まで駆動 

 //--現在角度の表示
 // for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){
 //   calPulse2Angle(DJ[i].jnum);     //DXLパルスから現在角度取得 
 // }
 
  calPulse2AngleSync_Read(); 

#ifdef __Debug_ON   
  Serial.println("----------------------------------------------------------------");
  Serial.print("Dxl Pulse: ");
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ Serial.print(DJ[i].pulse.n);    Serial.print('\t');   }
  Serial.println();  
  Serial.print("Dxl angle: ");
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ Serial.print(DJ[i].dxlAng.n);    Serial.print('\t');   }
  Serial.println();  
  Serial.print("Jnt angle: ");
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ Serial.print(DJ[i].ang.n);    Serial.print('\t');   }
  Serial.println();    
  Serial.println("----------------------------------------------------------------");
#endif   
 // testJointMotion();
  
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){  
    dxl_wb.itemWrite(DJ[i].id, "Profile_Velocity",200);  //リフトの速度制限を200*0.229 rpmに設定
    dxl_wb.itemWrite(DJ[i].id, "Profile_Acceleration",5);  
 }

#endif  
 //testMakeTrajectoryPoints();
 //testMakeTrajectoryPointsLinear();
// testMakeTrajectoryPointsLinear_v10cms();
// testMakeTrajectoryPointsLinear_v20cms();
// setTrajePoints_S1();
 delay(3000);
//rb.subst=1;                   //sub状態遷移変数
time_old = millis();
#ifdef __TimerLoop_ON
//-TimerLoop----------------
  Timer.stop();
  Timer.setPeriod(TIMER_RATE);           // in microseconds
  Timer.attachInterrupt(timerloop);
  Timer.start(); 
//-----------------------
#endif 

#ifdef __Torque_OFF
 for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){  
      result = dxl_wb.torqueOff(DJ[i].id, &log); 
  }
#endif

}


/////////////   loop  ////////////////////////////////
void loop() 
{
   const char *log;  
   bool result = false;   
   static bool taskCompleted = false;
   time_passed=micros()-time_old;
   //RC100_update(); 

   // readCommand();
  //if(servoOutputFlag){
  //   calPulse2AngleSync_Read(); 
  //   setGoalPulseSync_Write();
  //   servoOutputFlag = 0;
  //}

  if(!taskCompleted){
  if(setTrajePoints_S1()) {srv_flag=1; modeNum=2; pTask_flag=0;}
  Serial.println("S1");
  while(pTask_flag==0){ Serial.println("S1"); delay(100);};
 
  Serial.println("S1 completed. S2 start");
  delay(3000);
  if(setTrajePoints_S2()) {srv_flag=1; modeNum=2; pTask_flag=0;}
  while(pTask_flag==0){Serial.println("S2"); delay(100);};

  Serial.println("S2 completed. S3 start");
  delay(3000);
  if(setTrajePoints_S3()) {srv_flag=1; modeNum=2; pTask_flag=0;}
  while(pTask_flag==0){Serial.println("S3"); delay(100);};
 
  Serial.println("S3 completed. S4 start");
  delay(3000);
  if(setTrajePoints_S4()) {srv_flag=1; modeNum=2; pTask_flag=0;}
  while(pTask_flag==0){Serial.println("S4"); delay(100);};

  Serial.println("S4 completed. S5 start");
  delay(3000);
  if(setTrajePoints_S5()) {srv_flag=1; modeNum=2; pTask_flag=0;}
  while(pTask_flag==0){Serial.println("S5"); delay(100);};

  taskCompleted=true;
  Serial.println("All plane painting completed");
  }    
  joint_states_pub();
  time_old = micros();
}

//////////////////////////TimerLoop  //////////////////
void timerloop(void) {

   const char *log;  
   bool result = false;   
  
   cTime_old = micros();

 ////角度取得 pulse to ang_n
 // for(uint8_t i=Jnum_S; i <= Jnum_F ;i++) calPulse2Angle(DJ[i].jnum);   
  calPulse2AngleSync_Read(); 
 //// タスク  
  switch(modeNum){

    case 0:                //Joystick
       //joystickTask();           
       if(moveJoint(DJ[1].jnum,50,3)) 
       if(moveJoint(DJ[1].jnum,-50,3))
       if(moveJoint(DJ[1].jnum,0,3)) modeNum=100;
        
       break;
    case st_OfflineSinTrajectory: 
      
//        if(srv_flag==1){
            for(uint8_t i=Jnum_S; i <= Jnum_F ;i++) DJ[i].trFlag=exeTrajectoryPoints(DJ[i].jnum);
            tone(BDPIN_BUZZER, (int)DJ[J2].ang.g*10, 1000);
           // if(rtimeDelay(3000)){ 
           //   if(DJ[J1].trFlag){modeNum=100; DJ[J1].trIdx=0;DJ[J1].trFlag=0;}}
  //       }

        for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){
          setGoalAngle2Pulse(DJ[i].jnum);                  //目標角度をpulseにセット
          goal_position[i-1] = (int32_t)DJ[i].pulse.g;     //目標パルスをsync_write_goalpositionにセット
        }        
        
         //dynamixelへgoal_pulseをSync_write    
         setGoalPulseSync_Write();                       
                                       
        if(DJ[J1].trFlag){srv_flag=0; pTask_flag = 1; modeNum=100;}
        
         break;  
         
     case 100:
     
       break;
      
   default: break;
  }

 // for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ DJ[i].ang.g_buf = DJ[i].ang.g;}
  cTime = micros()- cTime_old;            //ms
#ifdef __Debug_ON     
  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){ Serial.print(DJ[i].ang.n);    Serial.print('\t');   }
  Serial.println(cTime);
#endif  
  servoOutputFlag = 1; 
}

//////// 目標角度をsyncWriteする   20220303追加
void setGoalPulseSync_Write(){
  //&dxl_id[]:synwriteするid配列の最初adress
  //3は、idの個数、
  //&goal_position[]:ynwriteするgoal_position配列の最初adress
  //1は、各idごとのgoal_positionデータの個数.
  
   dxl_wb.syncWrite(handler_index,&dxl_id[0],3,&goal_position[0],1);  //goal_positionをsyncWrite  
   dxl_wb.syncWrite(handler_index,&dxl_id[3],3,&goal_position[3],1);  //goal_positionをsyncWrite  
  
}

//////// 角度を計測するSync_Read 関数    20220301追加
void calPulse2AngleSync_Read(){
  //syncReadをする際、typeが異なるアクチュエータを連続で呼び出すと正常に読み取れない。
  //３つずつhandlerを呼び出すと正常に読み取れる。
   const char *log;   
   bool result = false;
   int32_t present_position[Jnum] = {0,}; 
    
   result = dxl_wb.syncRead(handler_index,&dxl_id[0],3,&log);   //J1,J2,J3をsync read
   result = dxl_wb.getSyncReadData(handler_index,&dxl_id[0],3, &present_position[0], &log);
   
   for(uint8_t i=Jnum_S; i <= Jnum_S+2 ;i++){
     DJ[i].pulse.n = present_position[i-1];
     DJ[i].dxlAng.n = DJ[i].dir_rot*(DJ[i].pulse.n*DJ[i].pul2deg);
     DJ[i].ang.n = DJ[i].dir_rot*(DJ[i].pulse.n-DJ[i].pulse.offset)*DJ[i].pul2deg*DJ[i].gearRatio*DJ[i].deg2dist;   
   }  

    result = dxl_wb.syncRead(handler_index,&dxl_id[3],3,&log);  //J3,J4,J5をsync read
    result = dxl_wb.getSyncReadData(handler_index,&dxl_id[3],3, &present_position[3], &log);
       
   for(uint8_t i=Jnum_S+3; i <= Jnum_F ;i++){
     DJ[i].pulse.n = present_position[i-1];
     DJ[i].dxlAng.n = DJ[i].dir_rot*(DJ[i].pulse.n*DJ[i].pul2deg);
     DJ[i].ang.n = DJ[i].dir_rot*(DJ[i].pulse.n-DJ[i].pulse.offset)*DJ[i].pul2deg*DJ[i].gearRatio*DJ[i].deg2dist;   
   }  
}  




////////////////////////////////////////////////////////////
void testJointMotion(){

  delay(3000);
  goInitJointConfig(DJ[J1].jnum, -45,1);  //関節を目標角度まで駆動 
  goInitJointConfig(DJ[J1].jnum, 45,1);  //関節を目標角度まで駆動 
  goInitJointConfig(DJ[J1].jnum, 0,1);  //関節を目標角度まで駆動 
  delay(500);
  goInitJointConfig(DJ[J2].jnum, 30,1);  //関節を目標角度まで駆動 
  goInitJointConfig(DJ[J2].jnum, 150,1);  //関節を目標角度まで駆動 
  delay(500);
  goInitJointConfig(DJ[J3].jnum, 10,3);  //関節を目標角度まで駆動 
  goInitJointConfig(DJ[J3].jnum, 90,3);  //関節を目標角度まで駆動 
  delay(500);
  goInitJointConfig(DJ[J4].jnum, 90,3);  //関節を目標角度まで駆動 
  goInitJointConfig(DJ[J4].jnum, 0,3);  //関節を目標角度まで駆動 
  delay(500);
  goInitJointConfig(DJ[J5].jnum, -90,5);  //関節を目標角度まで駆動 
  goInitJointConfig(DJ[J5].jnum, 0,5);  //関節を目標角度まで駆動 
  delay(500);
  goInitJointConfig(DJ[J6].jnum, 90,3);  //関節を目標角度まで駆動 
  goInitJointConfig(DJ[J6].jnum, 0,3);  //関節を目標角度まで駆動 
 }
 
void testMakeTrajectoryPoints(){

  /////////////Trajectoryの生成///////////////////////////////////
 float startTime=0.0;         //軌道スタート時間s
 float finishTime=5.0;        //軌道終了時間s
 float invTime = (TIMER_RATE/1000)*0.001;                               //インターバル時間
 uint16_t timeStampIndex =0;          //時間index
 uint16_t trajIndex=0;
 float tt;                            //時間

  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){
  
 DJ[i].trIdxMax=(uint16_t)((finishTime-startTime)/invTime);    //最大index値

 for(tt=startTime; tt<=finishTime; tt+=invTime){
//   trajTT[timeStampIndex++] = tt;  // 2*3.14*f(hz) 
   DJ[i].trajPoints[trajIndex] = 30*sin(2*3.14*0.2*tt);  // 2*3.14*f(hz) 
   trajIndex++;
 }
 trajIndex=0;
}

 for(uint8_t i=Jnum_S; i <= Jnum_F ;i++){
  for(int idx=0; idx<=DJ[i].trIdxMax; idx++){
  
  }
   delay(3000);
 }
/////////////////////////////////////////////////////////////// 
}

void testMakeTrajectoryPointsLinear(){

  float trpointsJ1[51]={
                          0,1.27,2.54,3.81,5.08,6.34,7.59,8.84,10.08,11.31,12.53,13.74,14.93,16.11,17.28,18.43,19.57,20.7,21.8,22.89,23.96,25.02,26.05,27.07,28.07,29.06,30.02,30.96,31.89,32.8,33.69,34.56,35.42,36.26,37.08,37.88,38.66,39.43,40.18,40.92,41.64,42.34,43.03,43.7,44.36,45.01,45.64,46.25,46.85,47.44,48.02
                        };
  float trpointsJ2[51]={
                         90,89.98,89.92,89.82,89.69,89.51,89.3,89.05,88.76,88.43,88.06,87.66,87.23,86.75,86.25,85.7,85.13,84.52,83.88,83.2,82.49,81.76,80.99,80.19,79.36,78.49,77.6,76.68,75.73,74.75,73.74,72.69,71.62,70.51,69.37,68.2,66.99,65.75,64.46,63.14,61.76,60.35,58.87,57.34,55.75,54.08,52.32,50.46,48.48,46.34,44
                        };
  float trpointsJ3[51]={
                          0,0.02,0.08,0.18,0.31,0.49,0.71,0.96,1.25,1.59,1.96,2.37,2.82,3.31,3.84,4.41,5.02,5.67,6.36,7.09,7.86,8.68,9.53,10.42,11.36,12.34,13.37,14.44,15.56,16.72,17.93,19.19,20.5,21.87,23.29,24.77,26.31,27.92,29.6,31.35,33.18,35.1,37.11,39.23,41.46,43.84,46.36,49.07,52,55.2,58.76
                        };
  float trpointsJ4[51]={
                          0,0,0,0,0,0,0,0,-0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0,0,-0,0,0,0,0,0,0,0,0,0,0,0,-0,-0,-0,0,0,0,0,0,0,0,0,0,0,0,-0
                        };
  float trpointsJ5[51]={
                          -90,-90,-90,-90,-90,-90,-90,-90.01,-90.01,-90.02,-90.02,-90.04,-90.05,-90.07,-90.09,-90.12,-90.15,-90.19,-90.24,-90.29,-90.36,-90.43,-90.52,-90.61,-90.72,-90.84,-90.97,-91.12,-91.28,-91.47,-91.66,-91.88,-92.12,-92.38,-92.66,-92.97,-93.31,-93.67,-94.06,-94.48,-94.94,-95.44,-95.98,-96.57,-97.21,-97.91,-98.68,-99.53,-100.47,-101.54,-102.76
                        };

  float trpointsJ6[51]={
                           0,1.27,2.54,3.81,5.08,6.34,7.59,8.84,10.08,11.31,12.53,13.74,14.93,16.11,17.28,18.43,19.57,20.7,21.8,22.89,23.96,25.02,26.05,27.07,28.07,29.06,30.02,30.96,31.89,32.8,33.69,34.56,35.42,36.26,37.08,37.88,38.66,39.43,40.18,40.92,41.64,42.34,43.03,43.7,44.36,45.01,45.64,46.25,46.85,47.44,48.02
                        };
                        
  for(uint16_t i=0;i<51;i++){
        DJ[J1].trajPoints[i]=trpointsJ1[i]; 
        DJ[J2].trajPoints[i]=trpointsJ2[i]; 
        DJ[J3].trajPoints[i]=trpointsJ3[i]; 
        DJ[J4].trajPoints[i]=trpointsJ4[i]; 
        DJ[J5].trajPoints[i]=trpointsJ5[i]; 
        DJ[J6].trajPoints[i]=trpointsJ6[i]; 
  }

  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++) DJ[i].trIdxMax =51;
}


void testMakeTrajectoryPointsLinear_v10cms(){

 uint16_t tSize = 558;   //0.1m/s 558   0.2m/s 280

  float trpointsJ1[tSize]={
                          0,0.41,0.83,1.24,1.66,2.07,2.48,2.9,3.31,3.72,4.14,4.55,4.96,5.37,5.78,6.19,6.6,7.01,7.42,7.83,8.24,8.64,9.05,9.45,9.86,10.26,10.66,11.06,11.46,11.86,12.26,12.66,13.06,13.45,13.84,14.24,14.63,15.02,15.41,15.8,16.18,16.57,16.95,17.33,17.71,18.09,18.47,18.85,19.22,19.6,19.97,20.34,20.71,21.08,21.44,21.81,22.17,22.53,22.89,23.25,23.6,23.96,24.31,24.66,25.01,25.36,25.7,26.05,26.39,26.73,27.07,27.41,27.74,28.08,28.41,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.25,27.75,27.25,26.74,26.23,25.72,25.2,24.68,24.15,23.62,23.08,22.54,21.99,21.44,20.89,20.33,19.77,19.2,18.63,18.06,17.48,16.9,16.32,15.73,15.14,14.54,13.94,13.34,12.74,12.13,11.52,10.91,10.29,9.68,9.06,8.44,7.81,7.19,6.56,5.93,5.3,4.67,4.03,3.4,2.77,2.13,1.49,0.86,0.22,-0.41,-1.05,-1.69,-2.32,-2.96,-3.59,-4.23,-4.86,-5.49,-6.12,-6.75,-7.38,-8,-8.62,-9.25,-9.86,-10.48,-11.1,-11.71,-12.32,-12.92,-13.53,-14.13,-14.72,-15.32,-15.91,-16.49,-17.08,-17.66,-18.23,-18.81,-19.38,-19.94,-20.5,-21.06,-21.61,-22.16,-22.7,-23.24,-23.78,-24.31,-24.83,-25.36,-25.87,-26.39,-26.9,-27.4,-27.9,-28.4,-28.89,-29.37,-29.85,-30.33,-30.8,-31.27,-31.73,-32.19,-32.64,-33.09,-33.54,-33.98,-34.41,-34.85,-35.27,-35.69,-36.11,-36.53,-36.93,-37.34,-37.74,-38.14,-38.53,-38.92,-39.3,-39.68,-40.05,-40.42,-40.79,-41.15,-41.51,-41.87,-42.22,-42.57,-42.91,-43.25,-43.59,-43.92,-44.25,-44.57,-44.9,-45.21,-45.53,-45.84,-46.15,-46.45,-46.75,-47.05,-47.34,-47.63,-47.92,-48.21,-48.21,-47.64,-47.06,-46.45,-45.83,-45.19,-44.54,-43.86,-43.17,-42.45,-41.72,-40.97,-40.2,-39.41,-38.61,-37.79,-36.95,-36.09,-35.22,-34.33,-33.43,-32.51,-31.59,-30.65,-29.7,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.25,-27.75,-27.25,-26.74,-26.23,-25.72,-25.2,-24.68,-24.15,-23.62,-23.08,-22.54,-21.99,-21.44,-20.89,-20.33,-19.77,-19.2,-18.63,-18.06,-17.48,-16.9,-16.32,-15.73,-15.14,-14.54,-13.94,-13.34,-12.74,-12.13,-11.52,-10.91,-10.29,-9.68,-9.06,-8.44,-7.81,-7.19,-6.56,-5.93,-5.3,-4.67,-4.03,-3.4,-2.77,-2.13,-1.49,-0.86,-0.22,0.41,1.05,1.69,2.32,2.96,3.59,4.23,4.86,5.49,6.12,6.75,7.38,8,8.62,9.25,9.86,10.48,11.1,11.71,12.32,12.92,13.53,14.13,14.72,15.32,15.91,16.49,17.08,17.66,18.23,18.81,19.38,19.94,20.5,21.06,21.61,22.16,22.7,23.24,23.78,24.31,24.83,25.36,25.87,26.39,26.9,27.4,27.9,28.4,28.89,29.37,29.85,30.33,30.8,31.27,31.73,32.19,32.64,33.09,33.54,33.98,34.41,34.85,35.27,35.69,36.11,36.53,36.93,37.34,37.74,38.14,38.53,38.92,39.3,39.68,40.05,40.42,40.79,41.15,41.51,41.87,42.22,42.57,42.91,43.25,43.59,43.92,44.25,44.57,44.9,45.21,45.53,45.84,46.15,46.45,46.75,47.05,47.34,47.63,47.92,48.21,48.21,47.93,47.64,47.35,47.06,46.76,46.45,46.15,45.83,45.52,45.19,44.87,44.54,44.2,43.86,43.52,43.17,42.81,42.45,42.09,41.72,41.35,40.97,40.59,40.2,39.81,39.81,39.43,39.05,38.66,38.27,37.88,37.48,37.08,36.67,36.26,35.84,35.42,34.99,34.56,34.13,33.69,33.25,32.8,32.35,31.89,31.43,30.96,30.49,30.02,29.54,29.06,28.57,28.07,27.58,27.07,26.57,26.05,25.54,25.02,24.49,23.96,23.43,22.89,22.35,21.8,21.25,20.7,20.14,19.57,19.01,18.43,17.86,17.28,16.7,16.11,15.52,14.93,14.33,13.74,13.13,12.53,11.92,11.31,10.7,10.08,9.46,8.84,8.22,7.59,6.97,6.34,5.71,5.08,4.45,3.81,3.18,2.54,1.91,1.27,0.64,0
                        };
  float trpointsJ2[tSize]={
                         90,90,89.99,89.98,89.97,89.95,89.93,89.9,89.87,89.83,89.79,89.75,89.7,89.65,89.59,89.53,89.47,89.4,89.33,89.25,89.17,89.09,89,88.91,88.81,88.71,88.6,88.5,88.38,88.27,88.14,88.02,87.89,87.76,87.62,87.48,87.34,87.19,87.03,86.88,86.72,86.55,86.39,86.21,86.04,85.86,85.67,85.49,85.3,85.1,84.9,84.7,84.49,84.28,84.07,83.85,83.63,83.4,83.18,82.94,82.71,82.47,82.22,81.98,81.73,81.47,81.21,80.95,80.69,80.42,80.15,79.87,79.59,79.31,79.02,78.73,78.73,78.69,78.64,78.59,78.52,78.44,78.36,78.26,78.15,78.04,77.92,77.78,77.64,77.49,77.32,77.15,76.97,76.78,76.58,76.37,76.16,75.93,75.69,75.45,75.19,74.93,74.93,75.33,75.72,76.11,76.49,76.87,77.24,77.6,77.96,78.3,78.64,78.98,79.31,79.63,79.94,80.24,80.54,80.83,81.11,81.39,81.66,81.91,82.17,82.41,82.64,82.87,83.09,83.3,83.5,83.69,83.88,84.05,84.22,84.38,84.52,84.66,84.79,84.92,85.03,85.13,85.22,85.31,85.38,85.45,85.5,85.55,85.59,85.61,85.63,85.64,85.64,85.63,85.61,85.58,85.54,85.49,85.43,85.36,85.28,85.2,85.1,84.99,84.88,84.76,84.62,84.48,84.33,84.17,84,83.82,83.63,83.44,83.24,83.02,82.8,82.57,82.34,82.09,81.84,81.58,81.31,81.03,80.74,80.45,80.15,79.84,79.53,79.21,78.88,78.54,78.2,77.85,77.49,77.13,76.76,76.38,76,75.61,75.21,74.81,74.4,73.98,73.56,73.13,72.7,72.26,71.81,71.36,70.9,70.44,69.97,69.49,69.01,68.52,68.03,67.53,67.02,66.51,65.99,65.47,64.94,64.4,63.86,63.31,62.75,62.19,61.62,61.04,60.46,59.87,59.27,58.67,58.05,57.43,56.8,56.17,55.52,54.87,54.2,53.53,52.85,52.15,51.45,50.73,50,49.26,48.51,47.74,46.96,46.16,45.34,45.34,47.17,48.95,50.68,52.37,54.02,55.62,57.18,58.7,60.19,61.63,63.04,64.4,65.73,67.03,68.28,69.49,70.67,71.81,72.92,73.98,75.01,75.99,76.94,77.86,78.73,78.73,78.69,78.64,78.59,78.52,78.44,78.36,78.26,78.15,78.04,77.92,77.78,77.64,77.49,77.32,77.15,76.97,76.78,76.58,76.37,76.16,75.93,75.69,75.45,75.19,74.93,74.93,75.33,75.72,76.11,76.49,76.87,77.24,77.6,77.96,78.3,78.64,78.98,79.31,79.63,79.94,80.24,80.54,80.83,81.11,81.39,81.66,81.91,82.17,82.41,82.64,82.87,83.09,83.3,83.5,83.69,83.88,84.05,84.22,84.38,84.52,84.66,84.79,84.92,85.03,85.13,85.22,85.31,85.38,85.45,85.5,85.55,85.59,85.61,85.63,85.64,85.64,85.63,85.61,85.58,85.54,85.49,85.43,85.36,85.28,85.2,85.1,84.99,84.88,84.76,84.62,84.48,84.33,84.17,84,83.82,83.63,83.44,83.24,83.02,82.8,82.57,82.34,82.09,81.84,81.58,81.31,81.03,80.74,80.45,80.15,79.84,79.53,79.21,78.88,78.54,78.2,77.85,77.49,77.13,76.76,76.38,76,75.61,75.21,74.81,74.4,73.98,73.56,73.13,72.7,72.26,71.81,71.36,70.9,70.44,69.97,69.49,69.01,68.52,68.03,67.53,67.02,66.51,65.99,65.47,64.94,64.4,63.86,63.31,62.75,62.19,61.62,61.04,60.46,59.87,59.27,58.67,58.05,57.43,56.8,56.17,55.52,54.87,54.2,53.53,52.85,52.15,51.45,50.73,50,49.26,48.51,47.74,46.96,46.16,45.34,45.34,46.32,47.29,48.24,49.17,50.09,50.99,51.87,52.73,53.58,54.41,55.23,56.03,56.82,57.59,58.35,59.09,59.81,60.53,61.22,61.91,62.57,63.23,63.87,64.5,65.11,65.11,65.75,66.37,66.99,67.6,68.2,68.79,69.37,69.95,70.51,71.07,71.62,72.16,72.69,73.22,73.74,74.25,74.75,75.24,75.73,76.21,76.68,77.15,77.6,78.05,78.49,78.93,79.36,79.77,80.19,80.59,80.99,81.38,81.76,82.13,82.49,82.85,83.2,83.54,83.88,84.2,84.52,84.83,85.13,85.42,85.7,85.98,86.25,86.5,86.75,86.99,87.23,87.45,87.66,87.87,88.06,88.25,88.43,88.6,88.76,88.91,89.05,89.18,89.3,89.41,89.51,89.6,89.69,89.76,89.82,89.88,89.92,89.96,89.98,90,90
                        };
  float trpointsJ3[tSize]={
                          0,0,0.01,0.01,0.02,0.04,0.06,0.08,0.1,0.13,0.16,0.19,0.22,0.26,0.31,0.35,0.4,0.45,0.51,0.56,0.63,0.69,0.76,0.83,0.9,0.98,1.06,1.14,1.23,1.32,1.41,1.51,1.61,1.71,1.82,1.93,2.04,2.16,2.28,2.4,2.53,2.66,2.79,2.93,3.07,3.21,3.36,3.51,3.66,3.82,3.98,4.14,4.31,4.48,4.66,4.83,5.02,5.2,5.39,5.58,5.78,5.98,6.19,6.39,6.6,6.82,7.04,7.26,7.49,7.72,7.96,8.2,8.44,8.69,8.94,9.19,9.19,8.6,8.02,7.44,6.88,6.33,5.79,5.26,4.74,4.23,3.73,3.24,2.76,2.29,1.83,1.38,0.94,0.51,0.09,-0.32,-0.72,-1.12,-1.5,-1.87,-2.23,-2.58,-2.58,-3.06,-3.53,-3.99,-4.44,-4.88,-5.31,-5.74,-6.15,-6.55,-6.94,-7.33,-7.7,-8.07,-8.42,-8.77,-9.1,-9.43,-9.75,-10.05,-10.35,-10.64,-10.91,-11.18,-11.44,-11.69,-11.93,-12.16,-12.38,-12.59,-12.78,-12.97,-13.15,-13.32,-13.48,-13.63,-13.77,-13.9,-14.02,-14.13,-14.23,-14.32,-14.4,-14.47,-14.53,-14.58,-14.62,-14.65,-14.66,-14.67,-14.67,-14.66,-14.64,-14.61,-14.56,-14.51,-14.45,-14.38,-14.29,-14.2,-14.1,-13.99,-13.86,-13.73,-13.59,-13.44,-13.27,-13.1,-12.92,-12.73,-12.52,-12.31,-12.09,-11.86,-11.62,-11.36,-11.1,-10.83,-10.55,-10.26,-9.96,-9.65,-9.33,-9,-8.66,-8.31,-7.96,-7.59,-7.21,-6.83,-6.43,-6.02,-5.61,-5.18,-4.75,-4.31,-3.85,-3.39,-2.92,-2.44,-1.94,-1.44,-0.93,-0.41,0.12,0.66,1.21,1.77,2.34,2.92,3.51,4.11,4.72,5.35,5.98,6.62,7.27,7.94,8.61,9.3,9.99,10.7,11.42,12.16,12.9,13.66,14.43,15.21,16,16.81,17.63,18.47,19.32,20.19,21.07,21.96,22.88,23.81,24.76,25.72,26.71,27.71,28.73,29.78,30.85,31.94,33.06,34.2,35.37,36.57,37.8,37.8,36.14,34.54,33,31.53,30.1,28.73,27.4,26.12,24.88,23.68,22.51,21.38,20.28,19.22,18.18,17.17,16.19,15.24,14.31,13.41,12.52,11.66,10.82,10,9.19,9.19,8.6,8.02,7.44,6.88,6.33,5.79,5.26,4.74,4.23,3.73,3.24,2.76,2.29,1.83,1.38,0.94,0.51,0.09,-0.32,-0.72,-1.12,-1.5,-1.87,-2.23,-2.58,-2.58,-3.06,-3.53,-3.99,-4.44,-4.88,-5.31,-5.74,-6.15,-6.55,-6.94,-7.33,-7.7,-8.07,-8.42,-8.77,-9.1,-9.43,-9.75,-10.05,-10.35,-10.64,-10.91,-11.18,-11.44,-11.69,-11.93,-12.16,-12.38,-12.59,-12.78,-12.97,-13.15,-13.32,-13.48,-13.63,-13.77,-13.9,-14.02,-14.13,-14.23,-14.32,-14.4,-14.47,-14.53,-14.58,-14.62,-14.65,-14.66,-14.67,-14.67,-14.66,-14.64,-14.61,-14.56,-14.51,-14.45,-14.38,-14.29,-14.2,-14.1,-13.99,-13.86,-13.73,-13.59,-13.44,-13.27,-13.1,-12.92,-12.73,-12.52,-12.31,-12.09,-11.86,-11.62,-11.36,-11.1,-10.83,-10.55,-10.26,-9.96,-9.65,-9.33,-9,-8.66,-8.31,-7.96,-7.59,-7.21,-6.83,-6.43,-6.02,-5.61,-5.18,-4.75,-4.31,-3.85,-3.39,-2.92,-2.44,-1.94,-1.44,-0.93,-0.41,0.12,0.66,1.21,1.77,2.34,2.92,3.51,4.11,4.72,5.35,5.98,6.62,7.27,7.94,8.61,9.3,9.99,10.7,11.42,12.16,12.9,13.66,14.43,15.21,16,16.81,17.63,18.47,19.32,20.19,21.07,21.96,22.88,23.81,24.76,25.72,26.71,27.71,28.73,29.78,30.85,31.94,33.06,34.2,35.37,36.57,37.8,37.8,37.19,36.59,36.03,35.49,34.97,34.48,34.01,33.56,33.14,32.73,32.35,31.98,31.63,31.3,30.99,30.7,30.42,30.16,29.91,29.68,29.47,29.27,29.08,28.91,28.75,28.75,27.92,27.11,26.31,25.53,24.77,24.02,23.29,22.57,21.87,21.18,20.5,19.84,19.19,18.55,17.93,17.32,16.72,16.13,15.56,14.99,14.44,13.9,13.37,12.85,12.34,11.85,11.36,10.89,10.42,9.97,9.53,9.1,8.68,8.26,7.86,7.47,7.09,6.72,6.36,6.01,5.67,5.34,5.02,4.71,4.41,4.12,3.84,3.57,3.31,3.06,2.82,2.59,2.37,2.16,1.96,1.77,1.59,1.42,1.25,1.1,0.96,0.83,0.71,0.59,0.49,0.4,0.31,0.24,0.18,0.12,0.08,0.04,0.02,0,0
                        };
  float trpointsJ4[tSize]={
                          0,0.27,0.53,0.8,1.07,1.33,1.6,1.87,2.13,2.4,2.66,2.93,3.19,3.45,3.72,3.98,4.24,4.5,4.76,5.02,5.28,5.54,5.8,6.05,6.31,6.57,6.82,7.07,7.32,7.58,7.83,8.08,8.32,8.57,8.82,9.06,9.3,9.55,9.79,10.03,10.27,10.5,10.74,10.98,11.21,11.44,11.67,11.9,12.13,12.36,12.59,12.81,13.04,13.26,13.48,13.7,13.92,14.14,14.35,14.57,14.78,14.99,15.2,15.41,15.62,15.83,16.03,16.24,16.44,16.64,16.84,17.04,17.24,17.44,17.64,17.83,17.83,17.87,17.91,17.96,18.01,18.05,18.11,18.16,18.22,18.27,18.33,18.4,18.46,18.53,18.6,18.67,18.75,18.83,18.91,18.99,19.07,19.16,19.25,19.35,19.45,19.55,19.55,19.63,19.7,19.78,19.86,19.93,20,20.07,20.14,20.21,20.27,20.34,20.4,20.46,20.51,20.57,20.62,20.67,20.72,20.77,20.81,20.86,20.9,20.93,20.97,21,21.03,21.06,21.09,21.11,21.14,21.15,21.17,21.19,21.2,21.21,21.21,21.22,21.22,21.22,21.22,21.21,21.2,21.19,21.18,21.17,21.15,21.13,21.11,21.08,21.05,21.02,20.99,20.96,20.92,20.88,20.84,20.8,20.75,20.71,20.66,20.61,20.55,20.5,20.44,20.38,20.32,20.25,20.19,20.12,20.05,19.99,19.91,19.84,19.77,19.69,19.61,19.54,19.46,19.37,19.29,19.21,19.13,19.04,18.95,18.87,18.78,18.69,18.6,18.51,18.42,18.33,18.24,18.15,18.05,17.96,17.87,17.77,17.68,17.59,17.49,17.4,17.3,17.21,17.11,17.02,16.93,16.83,16.74,16.64,16.55,16.46,16.36,16.27,16.18,16.09,15.99,15.9,15.81,15.72,15.63,15.54,15.45,15.37,15.28,15.19,15.11,15.02,14.94,14.85,14.77,14.69,14.6,14.52,14.44,14.37,14.29,14.21,14.14,14.06,13.99,13.92,13.84,13.77,13.71,13.64,13.57,13.51,13.44,13.38,13.32,13.32,12.38,11.43,10.45,9.46,8.44,7.4,6.34,5.25,4.13,2.99,1.82,0.61,-0.62,-1.88,-3.18,-4.51,-5.87,-7.26,-8.68,-10.13,-11.61,-13.13,-14.67,-16.24,-17.83,-17.83,-17.87,-17.91,-17.96,-18.01,-18.05,-18.11,-18.16,-18.22,-18.27,-18.33,-18.4,-18.46,-18.53,-18.6,-18.67,-18.75,-18.83,-18.91,-18.99,-19.07,-19.16,-19.25,-19.35,-19.45,-19.55,-19.55,-19.63,-19.7,-19.78,-19.86,-19.93,-20,-20.07,-20.14,-20.21,-20.27,-20.34,-20.4,-20.46,-20.51,-20.57,-20.62,-20.67,-20.72,-20.77,-20.81,-20.86,-20.9,-20.93,-20.97,-21,-21.03,-21.06,-21.09,-21.11,-21.14,-21.15,-21.17,-21.19,-21.2,-21.21,-21.21,-21.22,-21.22,-21.22,-21.22,-21.21,-21.2,-21.19,-21.18,-21.17,-21.15,-21.13,-21.11,-21.08,-21.05,-21.02,-20.99,-20.96,-20.92,-20.88,-20.84,-20.8,-20.75,-20.71,-20.66,-20.61,-20.55,-20.5,-20.44,-20.38,-20.32,-20.25,-20.19,-20.12,-20.05,-19.99,-19.91,-19.84,-19.77,-19.69,-19.61,-19.54,-19.46,-19.37,-19.29,-19.21,-19.13,-19.04,-18.95,-18.87,-18.78,-18.69,-18.6,-18.51,-18.42,-18.33,-18.24,-18.15,-18.05,-17.96,-17.87,-17.77,-17.68,-17.59,-17.49,-17.4,-17.3,-17.21,-17.11,-17.02,-16.93,-16.83,-16.74,-16.64,-16.55,-16.46,-16.36,-16.27,-16.18,-16.09,-15.99,-15.9,-15.81,-15.72,-15.63,-15.54,-15.45,-15.37,-15.28,-15.19,-15.11,-15.02,-14.94,-14.85,-14.77,-14.69,-14.6,-14.52,-14.44,-14.37,-14.29,-14.21,-14.14,-14.06,-13.99,-13.92,-13.84,-13.77,-13.71,-13.64,-13.57,-13.51,-13.44,-13.38,-13.32,-13.32,-12.86,-12.4,-11.93,-11.45,-10.97,-10.48,-9.99,-9.49,-8.99,-8.47,-7.96,-7.43,-6.9,-6.36,-5.82,-5.27,-4.71,-4.14,-3.57,-3,-2.41,-1.82,-1.22,-0.61,-0,-0,-0,-0,-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0,0,0,0,-0,-0,0,0,-0,-0,0,0,0,-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0,-0,-0,0,0,-0,0,0,0,0,0,0,0,0,0,0,-0,0
                        };
  float trpointsJ5[tSize]={
                         -90,-90,-89.99,-89.98,-89.96,-89.94,-89.91,-89.88,-89.84,-89.8,-89.76,-89.71,-89.65,-89.59,-89.52,-89.45,-89.38,-89.3,-89.22,-89.13,-89.04,-88.94,-88.84,-88.73,-88.62,-88.51,-88.39,-88.26,-88.14,-88,-87.87,-87.73,-87.59,-87.44,-87.29,-87.13,-86.97,-86.81,-86.64,-86.47,-86.3,-86.12,-85.94,-85.76,-85.57,-85.38,-85.19,-84.99,-84.8,-84.59,-84.39,-84.18,-83.97,-83.76,-83.54,-83.33,-83.11,-82.88,-82.66,-82.43,-82.2,-81.97,-81.74,-81.5,-81.27,-81.03,-80.79,-80.55,-80.3,-80.06,-79.81,-79.56,-79.31,-79.06,-78.81,-78.56,-78.56,-77.96,-77.36,-76.76,-76.16,-75.56,-74.96,-74.37,-73.77,-73.18,-72.59,-72,-71.41,-70.81,-70.23,-69.64,-69.05,-68.46,-67.87,-67.29,-66.7,-66.12,-65.54,-64.95,-64.37,-63.79,-63.79,-63.88,-63.96,-64.06,-64.16,-64.26,-64.37,-64.48,-64.6,-64.72,-64.84,-64.97,-65.11,-65.25,-65.39,-65.54,-65.69,-65.84,-66,-66.16,-66.32,-66.49,-66.66,-66.84,-67.01,-67.19,-67.38,-67.56,-67.75,-67.94,-68.13,-68.33,-68.52,-68.72,-68.92,-69.13,-69.33,-69.53,-69.74,-69.95,-70.16,-70.37,-70.58,-70.79,-71.01,-71.22,-71.44,-71.65,-71.87,-72.08,-72.3,-72.52,-72.73,-72.95,-73.17,-73.38,-73.6,-73.82,-74.03,-74.25,-74.46,-74.68,-74.89,-75.11,-75.32,-75.54,-75.75,-75.96,-76.17,-76.39,-76.6,-76.81,-77.02,-77.23,-77.44,-77.65,-77.86,-78.07,-78.28,-78.49,-78.69,-78.9,-79.11,-79.32,-79.53,-79.74,-79.94,-80.15,-80.36,-80.57,-80.78,-80.99,-81.2,-81.41,-81.62,-81.84,-82.05,-82.27,-82.48,-82.7,-82.92,-83.14,-83.36,-83.58,-83.8,-84.03,-84.26,-84.49,-84.72,-84.95,-85.19,-85.42,-85.67,-85.91,-86.15,-86.4,-86.65,-86.91,-87.16,-87.42,-87.69,-87.96,-88.23,-88.5,-88.78,-89.06,-89.35,-89.64,-89.94,-90.24,-90.54,-90.85,-91.17,-91.49,-91.82,-92.15,-92.49,-92.84,-93.19,-93.55,-93.92,-94.3,-94.68,-95.07,-95.47,-95.89,-96.31,-96.74,-97.18,-97.64,-98.11,-98.11,-96.96,-95.84,-94.75,-93.69,-92.67,-91.67,-90.7,-89.76,-88.85,-87.97,-87.12,-86.3,-85.51,-84.75,-84.02,-83.32,-82.65,-82.02,-81.42,-80.85,-80.32,-79.82,-79.36,-78.94,-78.56,-78.56,-77.96,-77.36,-76.76,-76.16,-75.56,-74.96,-74.37,-73.77,-73.18,-72.59,-72,-71.41,-70.81,-70.23,-69.64,-69.05,-68.46,-67.87,-67.29,-66.7,-66.12,-65.54,-64.95,-64.37,-63.79,-63.79,-63.88,-63.96,-64.06,-64.16,-64.26,-64.37,-64.48,-64.6,-64.72,-64.84,-64.97,-65.11,-65.25,-65.39,-65.54,-65.69,-65.84,-66,-66.16,-66.32,-66.49,-66.66,-66.84,-67.01,-67.19,-67.38,-67.56,-67.75,-67.94,-68.13,-68.33,-68.52,-68.72,-68.92,-69.13,-69.33,-69.53,-69.74,-69.95,-70.16,-70.37,-70.58,-70.79,-71.01,-71.22,-71.44,-71.65,-71.87,-72.08,-72.3,-72.52,-72.73,-72.95,-73.17,-73.38,-73.6,-73.82,-74.03,-74.25,-74.46,-74.68,-74.89,-75.11,-75.32,-75.54,-75.75,-75.96,-76.17,-76.39,-76.6,-76.81,-77.02,-77.23,-77.44,-77.65,-77.86,-78.07,-78.28,-78.49,-78.69,-78.9,-79.11,-79.32,-79.53,-79.74,-79.94,-80.15,-80.36,-80.57,-80.78,-80.99,-81.2,-81.41,-81.62,-81.84,-82.05,-82.27,-82.48,-82.7,-82.92,-83.14,-83.36,-83.58,-83.8,-84.03,-84.26,-84.49,-84.72,-84.95,-85.19,-85.42,-85.67,-85.91,-86.15,-86.4,-86.65,-86.91,-87.16,-87.42,-87.69,-87.96,-88.23,-88.5,-88.78,-89.06,-89.35,-89.64,-89.94,-90.24,-90.54,-90.85,-91.17,-91.49,-91.82,-92.15,-92.49,-92.84,-93.19,-93.55,-93.92,-94.3,-94.68,-95.07,-95.47,-95.89,-96.31,-96.74,-97.18,-97.64,-98.11,-98.11,-97.81,-97.52,-97.25,-96.99,-96.74,-96.5,-96.27,-96.06,-95.85,-95.66,-95.48,-95.3,-95.14,-94.98,-94.84,-94.7,-94.58,-94.46,-94.35,-94.25,-94.15,-94.07,-93.99,-93.92,-93.86,-93.86,-93.67,-93.48,-93.31,-93.13,-92.97,-92.81,-92.66,-92.52,-92.38,-92.25,-92.12,-92,-91.88,-91.77,-91.66,-91.56,-91.47,-91.37,-91.28,-91.2,-91.12,-91.04,-90.97,-90.9,-90.84,-90.78,-90.72,-90.66,-90.61,-90.56,-90.52,-90.47,-90.43,-90.39,-90.36,-90.33,-90.29,-90.27,-90.24,-90.21,-90.19,-90.17,-90.15,-90.13,-90.12,-90.1,-90.09,-90.08,-90.07,-90.06,-90.05,-90.04,-90.04,-90.03,-90.02,-90.02,-90.02,-90.01,-90.01,-90.01,-90.01,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90
                        };

  float trpointsJ6[tSize]={
                           0,0.41,0.83,1.24,1.66,2.07,2.48,2.89,3.31,3.72,4.13,4.54,4.95,5.36,5.76,6.17,6.57,6.98,7.38,7.78,8.18,8.58,8.97,9.37,9.76,10.15,10.54,10.93,11.31,11.7,12.08,12.46,12.84,13.21,13.59,13.96,14.32,14.69,15.05,15.42,15.77,16.13,16.48,16.83,17.18,17.53,17.87,18.21,18.55,18.88,19.22,19.55,19.87,20.2,20.52,20.84,21.15,21.46,21.77,22.08,22.38,22.69,22.98,23.28,23.57,23.86,24.15,24.43,24.71,24.99,25.27,25.54,25.81,26.08,26.34,26.6,26.6,26.4,26.21,26.01,25.81,25.61,25.4,25.2,25,24.8,24.59,24.38,24.18,23.97,23.76,23.55,23.33,23.12,22.9,22.69,22.47,22.25,22.02,21.8,21.57,21.34,21.34,20.82,20.3,19.77,19.24,18.71,18.18,17.64,17.1,16.56,16.02,15.47,14.92,14.37,13.82,13.26,12.7,12.14,11.58,11.01,10.45,9.88,9.31,8.73,8.16,7.58,7.01,6.43,5.85,5.26,4.68,4.1,3.51,2.92,2.33,1.74,1.15,0.56,-0.03,-0.62,-1.21,-1.8,-2.4,-2.99,-3.58,-4.17,-4.77,-5.36,-5.95,-6.54,-7.13,-7.72,-8.31,-8.89,-9.48,-10.06,-10.65,-11.23,-11.81,-12.38,-12.96,-13.53,-14.1,-14.67,-15.24,-15.8,-16.36,-16.92,-17.47,-18.02,-18.57,-19.12,-19.66,-20.2,-20.73,-21.26,-21.79,-22.31,-22.83,-23.35,-23.86,-24.37,-24.87,-25.37,-25.87,-26.36,-26.84,-27.32,-27.8,-28.27,-28.74,-29.2,-29.66,-30.12,-30.56,-31.01,-31.45,-31.88,-32.31,-32.74,-33.16,-33.57,-33.98,-34.39,-34.79,-35.18,-35.58,-35.96,-36.34,-36.72,-37.09,-37.46,-37.82,-38.17,-38.53,-38.87,-39.22,-39.55,-39.89,-40.21,-40.54,-40.86,-41.17,-41.48,-41.78,-42.08,-42.38,-42.67,-42.96,-43.24,-43.52,-43.79,-44.06,-44.32,-44.58,-44.83,-45.08,-45.32,-45.56,-45.8,-46.03,-46.26,-46.48,-46.69,-46.91,-47.11,-47.31,-47.51,-47.7,-47.89,-48.07,-48.07,-47.62,-47.13,-46.61,-46.04,-45.44,-44.8,-44.13,-43.42,-42.68,-41.9,-41.09,-40.24,-39.37,-38.46,-37.52,-36.55,-35.55,-34.52,-33.46,-32.38,-31.27,-30.14,-28.98,-27.8,-26.6,-26.6,-26.4,-26.21,-26.01,-25.81,-25.61,-25.4,-25.2,-25,-24.8,-24.59,-24.38,-24.18,-23.97,-23.76,-23.55,-23.33,-23.12,-22.9,-22.69,-22.47,-22.25,-22.02,-21.8,-21.57,-21.34,-21.34,-20.82,-20.3,-19.77,-19.24,-18.71,-18.18,-17.64,-17.1,-16.56,-16.02,-15.47,-14.92,-14.37,-13.82,-13.26,-12.7,-12.14,-11.58,-11.01,-10.45,-9.88,-9.31,-8.73,-8.16,-7.58,-7.01,-6.43,-5.85,-5.26,-4.68,-4.1,-3.51,-2.92,-2.33,-1.74,-1.15,-0.56,0.03,0.62,1.21,1.8,2.4,2.99,3.58,4.17,4.77,5.36,5.95,6.54,7.13,7.72,8.31,8.89,9.48,10.06,10.65,11.23,11.81,12.38,12.96,13.53,14.1,14.67,15.24,15.8,16.36,16.92,17.47,18.02,18.57,19.12,19.66,20.2,20.73,21.26,21.79,22.31,22.83,23.35,23.86,24.37,24.87,25.37,25.87,26.36,26.84,27.32,27.8,28.27,28.74,29.2,29.66,30.12,30.56,31.01,31.45,31.88,32.31,32.74,33.16,33.57,33.98,34.39,34.79,35.18,35.58,35.96,36.34,36.72,37.09,37.46,37.82,38.17,38.53,38.87,39.22,39.55,39.89,40.21,40.54,40.86,41.17,41.48,41.78,42.08,42.38,42.67,42.96,43.24,43.52,43.79,44.06,44.32,44.58,44.83,45.08,45.32,45.56,45.8,46.03,46.26,46.48,46.69,46.91,47.11,47.31,47.51,47.7,47.89,48.07,48.07,47.79,47.5,47.2,46.9,46.59,46.28,45.97,45.65,45.32,44.99,44.66,44.33,43.99,43.65,43.31,42.96,42.62,42.27,41.92,41.57,41.22,40.87,40.51,40.16,39.81,39.81,39.43,39.05,38.66,38.27,37.88,37.48,37.08,36.67,36.26,35.84,35.42,34.99,34.56,34.13,33.69,33.25,32.8,32.35,31.89,31.43,30.96,30.49,30.02,29.54,29.06,28.57,28.07,27.58,27.07,26.57,26.05,25.54,25.02,24.49,23.96,23.43,22.89,22.35,21.8,21.25,20.7,20.14,19.57,19.01,18.43,17.86,17.28,16.7,16.11,15.52,14.93,14.33,13.74,13.13,12.53,11.92,11.31,10.7,10.08,9.46,8.84,8.22,7.59,6.97,6.34,5.71,5.08,4.45,3.81,3.18,2.54,1.91,1.27,0.64,0
                        };

  int spNum = 2;                                  //補間データ数      (uint)(waypoints周期時間(ms)/(TIMER_RATE/1000))
  float new_trpointsJ1[(tSize-1)*spNum+1]={0,};   //新しい軌道配列
  float new_trpointsJ2[(tSize-1)*spNum+1]={0,};   //新しい軌道配列
  float new_trpointsJ3[(tSize-1)*spNum+1]={0,};   //新しい軌道配列
  float new_trpointsJ4[(tSize-1)*spNum+1]={0,};   //新しい軌道配列
  float new_trpointsJ5[(tSize-1)*spNum+1]={0,};   //新しい軌道配列
  float new_trpointsJ6[(tSize-1)*spNum+1]={0,};   //新しい軌道配列
  
  float trajStep[Jnum]={0,};                               //補間軌道のステップ値

  for(uint16_t i=0; i< tSize-1; i++){ 
    trajStep[0] = (trpointsJ1[i+1] - trpointsJ1[i])/(float)spNum; 
    trajStep[1] = (trpointsJ2[i+1] - trpointsJ2[i])/(float)spNum; 
    trajStep[2] = (trpointsJ3[i+1] - trpointsJ3[i])/(float)spNum; 
    trajStep[3] = (trpointsJ4[i+1] - trpointsJ4[i])/(float)spNum; 
    trajStep[4] = (trpointsJ5[i+1] - trpointsJ5[i])/(float)spNum; 
    trajStep[5] = (trpointsJ6[i+1] - trpointsJ6[i])/(float)spNum; 
                        
    for(uint16_t j=0; j <= spNum; j++){
       new_trpointsJ1[i*spNum+j]=trpointsJ1[i]+trajStep[0]*j;
       new_trpointsJ2[i*spNum+j]=trpointsJ2[i]+trajStep[1]*j;
       new_trpointsJ3[i*spNum+j]=trpointsJ3[i]+trajStep[2]*j;
       new_trpointsJ4[i*spNum+j]=trpointsJ4[i]+trajStep[3]*j;
       new_trpointsJ5[i*spNum+j]=trpointsJ5[i]+trajStep[4]*j;
       new_trpointsJ6[i*spNum+j]=trpointsJ6[i]+trajStep[5]*j;               
    }
  }

  for(uint16_t i=0; i< (tSize-1)*spNum+1; i++){
        DJ[J1].trajPoints[i]=new_trpointsJ1[i]; 
        DJ[J2].trajPoints[i]=new_trpointsJ2[i]; 
        DJ[J3].trajPoints[i]=new_trpointsJ3[i]; 
        DJ[J4].trajPoints[i]=new_trpointsJ4[i]; 
        DJ[J5].trajPoints[i]=new_trpointsJ5[i]; 
        DJ[J6].trajPoints[i]=new_trpointsJ6[i]; 
//        Serial.print(DJ[1].trajPoints[i]);  Serial.print('\t');
//        Serial.print(DJ[2].trajPoints[i]);  Serial.print('\t');
//        Serial.print(DJ[3].trajPoints[i]); Serial.print('\t');
//        Serial.print(DJ[4].trajPoints[i]); Serial.print('\t');
//        Serial.print(DJ[5].trajPoints[i]); Serial.print('\t');
//        Serial.println(DJ[6].trajPoints[i]); 
  }

  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++) DJ[i].trIdxMax =(tSize-1)*spNum+1;
}

void testMakeTrajectoryPointsLinear_v20cms(){

  uint16_t tSize = 280;

  float trpointsJ1[tSize]={
                          0,0.84,1.68,2.52,3.36,4.19,5.03,5.86,6.69,7.52,8.35,9.17,9.99,10.8,11.62,12.42,13.23,14.03,14.82,15.61,16.39,17.17,17.94,18.71,19.47,20.22,20.97,21.71,22.44,23.17,23.89,24.6,25.31,26.01,26.7,27.39,28.07,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,28.74,27.75,26.74,25.72,24.68,23.62,22.54,21.44,20.33,19.2,18.06,16.9,15.73,14.54,13.34,12.13,10.91,9.68,8.44,7.19,5.93,4.67,3.4,2.13,0.86,-0.41,-1.69,-2.96,-4.23,-5.49,-6.75,-8,-9.25,-10.48,-11.71,-12.92,-14.13,-15.32,-16.49,-17.66,-18.81,-19.94,-21.06,-22.16,-23.24,-24.31,-25.36,-26.39,-27.4,-28.4,-29.37,-30.33,-31.27,-32.19,-33.09,-33.98,-34.85,-35.69,-36.53,-37.34,-38.14,-38.92,-39.68,-40.42,-41.15,-41.87,-42.57,-43.25,-43.92,-44.57,-45.21,-45.84,-46.45,-47.05,-47.63,-48.21,-48.21,-47.01,-45.73,-44.37,-42.93,-41.41,-39.81,-38.13,-36.38,-34.55,-32.67,-30.73,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-28.74,-27.75,-26.74,-25.72,-24.68,-23.62,-22.54,-21.44,-20.33,-19.2,-18.06,-16.9,-15.73,-14.54,-13.34,-12.13,-10.91,-9.68,-8.44,-7.19,-5.93,-4.67,-3.4,-2.13,-0.86,0.41,1.69,2.96,4.23,5.49,6.75,8,9.25,10.48,11.71,12.92,14.13,15.32,16.49,17.66,18.81,19.94,21.06,22.16,23.24,24.31,25.36,26.39,27.4,28.4,29.37,30.33,31.27,32.19,33.09,33.98,34.85,35.69,36.53,37.34,38.14,38.92,39.68,40.42,41.15,41.87,42.57,43.25,43.92,44.57,45.21,45.84,46.45,47.05,47.63,48.21,48.21,47.62,47.01,46.38,45.73,45.06,44.37,43.66,42.93,42.18,41.41,40.62,39.81,39.81,39.04,38.25,37.45,36.62,35.78,34.92,34.05,33.15,32.24,31.31,30.35,29.38,28.39,27.39,26.36,25.31,24.25,23.17,22.07,20.95,19.82,18.67,17.5,16.32,15.12,13.91,12.69,11.46,10.21,8.96,7.7,6.42,5.15,3.87,2.58,1.29,0
                        };
  float trpointsJ2[tSize]={
                         90,89.99,89.97,89.92,89.86,89.79,89.69,89.58,89.46,89.31,89.15,88.97,88.78,88.57,88.34,88.09,87.83,87.56,87.26,86.95,86.63,86.29,85.93,85.56,85.17,84.77,84.35,83.91,83.46,82.99,82.51,82.02,81.51,80.98,80.44,79.88,79.31,78.73,78.73,78.64,78.51,78.33,78.12,77.86,77.56,77.22,76.85,76.43,75.97,75.47,74.93,74.93,75.72,76.49,77.24,77.96,78.64,79.31,79.94,80.54,81.11,81.66,82.17,82.64,83.09,83.5,83.88,84.22,84.52,84.79,85.03,85.22,85.38,85.5,85.59,85.63,85.64,85.61,85.54,85.43,85.28,85.1,84.88,84.62,84.33,84,83.63,83.24,82.8,82.34,81.84,81.31,80.74,80.15,79.53,78.88,78.2,77.49,76.76,76,75.21,74.4,73.56,72.7,71.81,70.9,69.97,69.01,68.03,67.02,65.99,64.94,63.86,62.75,61.62,60.46,59.27,58.05,56.8,55.52,54.2,52.85,51.45,50,48.51,46.96,45.34,45.34,49.1,52.65,56.01,59.2,62.22,65.07,67.76,70.28,72.64,74.84,76.87,78.73,78.73,78.64,78.51,78.33,78.12,77.86,77.56,77.22,76.85,76.43,75.97,75.47,74.93,74.93,75.72,76.49,77.24,77.96,78.64,79.31,79.94,80.54,81.11,81.66,82.17,82.64,83.09,83.5,83.88,84.22,84.52,84.79,85.03,85.22,85.38,85.5,85.59,85.63,85.64,85.61,85.54,85.43,85.28,85.1,84.88,84.62,84.33,84,83.63,83.24,82.8,82.34,81.84,81.31,80.74,80.15,79.53,78.88,78.2,77.49,76.76,76,75.21,74.4,73.56,72.7,71.81,70.9,69.97,69.01,68.03,67.02,65.99,64.94,63.86,62.75,61.62,60.46,59.27,58.05,56.8,55.52,54.2,52.85,51.45,50,48.51,46.96,45.34,45.34,47.37,49.33,51.21,53.02,54.76,56.43,58.03,59.57,61.05,62.46,63.82,65.11,65.11,66.39,67.63,68.84,70.01,71.14,72.25,73.32,74.35,75.36,76.34,77.28,78.2,79.08,79.93,80.75,81.54,82.3,83.02,83.72,84.37,85,85.59,86.15,86.67,87.15,87.6,88.01,88.39,88.72,89.02,89.28,89.5,89.68,89.82,89.92,89.98,90
                        };
  float trpointsJ3[tSize]={
                          0,0.01,0.03,0.06,0.1,0.16,0.23,0.31,0.41,0.52,0.64,0.78,0.93,1.09,1.26,1.45,1.65,1.87,2.1,2.34,2.6,2.87,3.15,3.45,3.76,4.09,4.43,4.79,5.16,5.54,5.94,6.36,6.79,7.24,7.7,8.18,8.68,9.19,9.19,7.97,6.79,5.66,4.57,3.52,2.52,1.56,0.65,-0.22,-1.05,-1.84,-2.58,-2.58,-3.53,-4.44,-5.31,-6.15,-6.94,-7.7,-8.42,-9.1,-9.75,-10.35,-10.91,-11.44,-11.93,-12.38,-12.78,-13.15,-13.48,-13.77,-14.02,-14.23,-14.4,-14.53,-14.62,-14.66,-14.67,-14.64,-14.56,-14.45,-14.29,-14.1,-13.86,-13.59,-13.27,-12.92,-12.52,-12.09,-11.62,-11.1,-10.55,-9.96,-9.33,-8.66,-7.96,-7.21,-6.43,-5.61,-4.75,-3.85,-2.92,-1.94,-0.93,0.12,1.21,2.34,3.51,4.72,5.98,7.27,8.61,9.99,11.42,12.9,14.43,16,17.63,19.32,21.07,22.88,24.76,26.71,28.73,30.85,33.06,35.37,37.8,37.8,34.41,31.29,28.39,25.7,23.19,20.83,18.61,16.52,14.54,12.67,10.89,9.19,9.19,7.97,6.79,5.66,4.57,3.52,2.52,1.56,0.65,-0.22,-1.05,-1.84,-2.58,-2.58,-3.53,-4.44,-5.31,-6.15,-6.94,-7.7,-8.42,-9.1,-9.75,-10.35,-10.91,-11.44,-11.93,-12.38,-12.78,-13.15,-13.48,-13.77,-14.02,-14.23,-14.4,-14.53,-14.62,-14.66,-14.67,-14.64,-14.56,-14.45,-14.29,-14.1,-13.86,-13.59,-13.27,-12.92,-12.52,-12.09,-11.62,-11.1,-10.55,-9.96,-9.33,-8.66,-7.96,-7.21,-6.43,-5.61,-4.75,-3.85,-2.92,-1.94,-0.93,0.12,1.21,2.34,3.51,4.72,5.98,7.27,8.61,9.99,11.42,12.9,14.43,16,17.63,19.32,21.07,22.88,24.76,26.71,28.73,30.85,33.06,35.37,37.8,37.8,36.55,35.4,34.36,33.42,32.57,31.8,31.12,30.51,29.97,29.5,29.1,28.75,28.75,27.09,25.49,23.96,22.5,21.09,19.73,18.43,17.19,15.99,14.84,13.74,12.69,11.68,10.71,9.79,8.91,8.08,7.29,6.54,5.83,5.16,4.53,3.95,3.4,2.9,2.44,2.01,1.63,1.29,0.99,0.72,0.5,0.32,0.18,0.08,0.02,0
                        };
  float trpointsJ4[tSize]={
                          0,0.54,1.08,1.62,2.16,2.7,3.23,3.77,4.3,4.83,5.35,5.87,6.39,6.91,7.42,7.93,8.43,8.93,9.42,9.91,10.4,10.87,11.35,11.82,12.28,12.74,13.19,13.64,14.08,14.52,14.95,15.38,15.8,16.22,16.63,17.03,17.43,17.83,17.83,17.92,18.01,18.12,18.23,18.36,18.5,18.64,18.8,18.97,19.15,19.34,19.55,19.55,19.7,19.86,20,20.14,20.27,20.4,20.51,20.62,20.72,20.81,20.9,20.97,21.03,21.09,21.14,21.17,21.2,21.21,21.22,21.22,21.2,21.18,21.15,21.11,21.05,20.99,20.92,20.84,20.75,20.66,20.55,20.44,20.32,20.19,20.05,19.91,19.77,19.61,19.46,19.29,19.13,18.95,18.78,18.6,18.42,18.24,18.05,17.87,17.68,17.49,17.3,17.11,16.93,16.74,16.55,16.36,16.18,15.99,15.81,15.63,15.45,15.28,15.11,14.94,14.77,14.6,14.44,14.29,14.14,13.99,13.84,13.71,13.57,13.44,13.32,13.32,11.35,9.29,7.14,4.88,2.5,-0,-2.64,-5.41,-8.32,-11.36,-14.54,-17.83,-17.83,-17.92,-18.01,-18.12,-18.23,-18.36,-18.5,-18.64,-18.8,-18.97,-19.15,-19.34,-19.55,-19.55,-19.7,-19.86,-20,-20.14,-20.27,-20.4,-20.51,-20.62,-20.72,-20.81,-20.9,-20.97,-21.03,-21.09,-21.14,-21.17,-21.2,-21.21,-21.22,-21.22,-21.2,-21.18,-21.15,-21.11,-21.05,-20.99,-20.92,-20.84,-20.75,-20.66,-20.55,-20.44,-20.32,-20.19,-20.05,-19.91,-19.77,-19.61,-19.46,-19.29,-19.13,-18.95,-18.78,-18.6,-18.42,-18.24,-18.05,-17.87,-17.68,-17.49,-17.3,-17.11,-16.93,-16.74,-16.55,-16.36,-16.18,-15.99,-15.81,-15.63,-15.45,-15.28,-15.11,-14.94,-14.77,-14.6,-14.44,-14.29,-14.14,-13.99,-13.84,-13.71,-13.57,-13.44,-13.32,-13.32,-12.36,-11.37,-10.36,-9.32,-8.26,-7.17,-6.05,-4.9,-3.72,-2.51,-1.27,-0,-0,-0,0,0,0,0,0,0,-0,-0,0,0,0,-0,0,-0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0,0,0,0,0,0,0,0
                        };
  float trpointsJ5[tSize]={
                          -90,-89.99,-89.96,-89.91,-89.84,-89.75,-89.64,-89.51,-89.36,-89.2,-89.01,-88.81,-88.58,-88.34,-88.09,-87.81,-87.52,-87.22,-86.89,-86.56,-86.21,-85.84,-85.46,-85.07,-84.67,-84.25,-83.82,-83.39,-82.94,-82.48,-82.02,-81.54,-81.06,-80.57,-80.08,-79.58,-79.07,-78.56,-78.56,-77.31,-76.06,-74.82,-73.58,-72.34,-71.11,-69.88,-68.66,-67.44,-66.22,-65,-63.79,-63.79,-63.96,-64.16,-64.37,-64.6,-64.84,-65.11,-65.39,-65.69,-66,-66.32,-66.66,-67.01,-67.38,-67.75,-68.13,-68.52,-68.92,-69.33,-69.74,-70.16,-70.58,-71.01,-71.44,-71.87,-72.3,-72.73,-73.17,-73.6,-74.03,-74.46,-74.89,-75.32,-75.75,-76.17,-76.6,-77.02,-77.44,-77.86,-78.28,-78.69,-79.11,-79.53,-79.94,-80.36,-80.78,-81.2,-81.62,-82.05,-82.48,-82.92,-83.36,-83.8,-84.26,-84.72,-85.19,-85.67,-86.15,-86.65,-87.16,-87.69,-88.23,-88.78,-89.35,-89.94,-90.54,-91.17,-91.82,-92.49,-93.19,-93.92,-94.68,-95.47,-96.31,-97.18,-98.11,-98.11,-95.74,-93.52,-91.43,-89.46,-87.62,-85.9,-84.32,-82.87,-81.56,-80.4,-79.4,-78.56,-78.56,-77.31,-76.06,-74.82,-73.58,-72.34,-71.11,-69.88,-68.66,-67.44,-66.22,-65,-63.79,-63.79,-63.96,-64.16,-64.37,-64.6,-64.84,-65.11,-65.39,-65.69,-66,-66.32,-66.66,-67.01,-67.38,-67.75,-68.13,-68.52,-68.92,-69.33,-69.74,-70.16,-70.58,-71.01,-71.44,-71.87,-72.3,-72.73,-73.17,-73.6,-74.03,-74.46,-74.89,-75.32,-75.75,-76.17,-76.6,-77.02,-77.44,-77.86,-78.28,-78.69,-79.11,-79.53,-79.94,-80.36,-80.78,-81.2,-81.62,-82.05,-82.48,-82.92,-83.36,-83.8,-84.26,-84.72,-85.19,-85.67,-86.15,-86.65,-87.16,-87.69,-88.23,-88.78,-89.35,-89.94,-90.54,-91.17,-91.82,-92.49,-93.19,-93.92,-94.68,-95.47,-96.31,-97.18,-98.11,-98.11,-97.5,-96.95,-96.44,-95.99,-95.58,-95.22,-94.9,-94.62,-94.37,-94.17,-94,-93.86,-93.86,-93.48,-93.13,-92.8,-92.5,-92.23,-91.98,-91.75,-91.54,-91.35,-91.18,-91.02,-90.88,-90.76,-90.64,-90.54,-90.45,-90.38,-90.31,-90.25,-90.2,-90.16,-90.12,-90.1,-90.07,-90.05,-90.04,-90.03,-90.02,-90.01,-90.01,-90,-90,-90,-90,-90,-90,-90
                        };

  float trpointsJ6[tSize]={
                           0,0.84,1.68,2.52,3.35,4.18,5.01,5.84,6.66,7.48,8.29,9.09,9.89,10.68,11.46,12.23,13,13.76,14.5,15.24,15.97,16.68,17.39,18.08,18.77,19.44,20.1,20.75,21.39,22.01,22.63,23.23,23.82,24.4,24.97,25.52,26.07,26.6,26.6,26.19,25.77,25.35,24.93,24.5,24.07,23.64,23.19,22.74,22.28,21.82,21.34,21.34,20.3,19.24,18.18,17.1,16.02,14.92,13.82,12.7,11.58,10.45,9.31,8.16,7.01,5.85,4.68,3.51,2.33,1.15,-0.03,-1.21,-2.4,-3.58,-4.77,-5.95,-7.13,-8.31,-9.48,-10.65,-11.81,-12.96,-14.1,-15.24,-16.36,-17.47,-18.57,-19.66,-20.73,-21.79,-22.83,-23.86,-24.87,-25.87,-26.84,-27.8,-28.74,-29.66,-30.56,-31.45,-32.31,-33.16,-33.98,-34.79,-35.58,-36.34,-37.09,-37.82,-38.53,-39.22,-39.89,-40.54,-41.17,-41.78,-42.38,-42.96,-43.52,-44.06,-44.58,-45.08,-45.56,-46.03,-46.48,-46.91,-47.31,-47.7,-48.07,-48.07,-47.09,-45.94,-44.64,-43.17,-41.56,-39.81,-37.91,-35.89,-33.73,-31.46,-29.08,-26.6,-26.6,-26.19,-25.77,-25.35,-24.93,-24.5,-24.07,-23.64,-23.19,-22.74,-22.28,-21.82,-21.34,-21.34,-20.3,-19.24,-18.18,-17.1,-16.02,-14.92,-13.82,-12.7,-11.58,-10.45,-9.31,-8.16,-7.01,-5.85,-4.68,-3.51,-2.33,-1.15,0.03,1.21,2.4,3.58,4.77,5.95,7.13,8.31,9.48,10.65,11.81,12.96,14.1,15.24,16.36,17.47,18.57,19.66,20.73,21.79,22.83,23.86,24.87,25.87,26.84,27.8,28.74,29.66,30.56,31.45,32.31,33.16,33.98,34.79,35.58,36.34,37.09,37.82,38.53,39.22,39.89,40.54,41.17,41.78,42.38,42.96,43.52,44.06,44.58,45.08,45.56,46.03,46.48,46.91,47.31,47.7,48.07,48.07,47.47,46.85,46.2,45.54,44.86,44.16,43.45,42.73,42.01,41.28,40.54,39.81,39.81,39.04,38.25,37.45,36.62,35.78,34.92,34.05,33.15,32.24,31.31,30.35,29.38,28.39,27.39,26.36,25.31,24.25,23.17,22.07,20.95,19.82,18.67,17.5,16.32,15.12,13.91,12.69,11.46,10.21,8.96,7.7,6.42,5.15,3.87,2.58,1.29,0
                        };
                        
  for(uint16_t i=0;i<tSize;i++){
        DJ[J1].trajPoints[i]=trpointsJ1[i]; 
        DJ[J2].trajPoints[i]=trpointsJ2[i]; 
        DJ[J3].trajPoints[i]=trpointsJ3[i]; 
        DJ[J4].trajPoints[i]=trpointsJ4[i]; 
        DJ[J5].trajPoints[i]=trpointsJ5[i]; 
        DJ[J6].trajPoints[i]=trpointsJ6[i]; 
/*        Serial.print(DJ[1].trajPoints[i]);  Serial.print('\t');
        Serial.print(DJ[2].trajPoints[i]);  Serial.print('\t');
        Serial.print(DJ[3].trajPoints[i]); Serial.print('\t');
        Serial.print(DJ[4].trajPoints[i]); Serial.print('\t');
        Serial.print(DJ[5].trajPoints[i]); Serial.print('\t');
        Serial.println(DJ[6].trajPoints[i]); */
  }

  for(uint8_t i=Jnum_S; i <= Jnum_F ;i++) DJ[i].trIdxMax =tSize;
}


  
